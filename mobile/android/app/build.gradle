apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}


// If `music.CREATE_PRIVACY_BUILD` defined in `gradle.properties` is `true`,
// we don't run this code.
if (!findProperty('music.CREATE_PRIVACY_BUILD')?.toBoolean()) {
    apply plugin: "io.sentry.android.gradle"

    /**
    * Sentry gradle from React Native (@sentry/react-native) that handles uploads Sentry source maps.
    *  - It seems like source maps aren't automatically uploaded with `expo run:android --variant release`.
    *    - https://github.com/getsentry/sentry-react-native/issues/3907
    *    - We're going to trust that it works in the production variants which are built with
    *    `./gradlew assembleRelease`.
    */
    apply from: new File(["node", "--print", "require.resolve('@sentry/react-native/package.json')"].execute().text.trim(), "../sentry.gradle")

    /**
    * View default settings at: https://docs.sentry.io/platforms/android/configuration/gradle/
    *
    * Code partially based off of: https://github.com/getsentry/sentry-react-native/blob/main/samples/react-native/android/app/build.gradle
    */ 
    sentry {
        // Whether the plugin should attempt to auto-upload the mapping file to Sentry or not.
        // If disabled the plugin will run a dry-run and just generate a UUID.
        // The mapping file has to be uploaded manually via sentry-cli in this case.
        // Default is enabled.
        autoUploadProguardMapping = shouldSentryAutoUpload()

        // Disables or enables the automatic configuration of Native Symbols
        // for Sentry. This executes sentry-cli automatically so
        // you don't need to do it manually.
        // Default is disabled.
        uploadNativeSymbols = shouldSentryAutoUpload()

        // Does or doesn't include the source code of native code for Sentry.
        // This executes sentry-cli with the --include-sources param. automatically so
        // you don't need to do it manually.
        // This option has an effect only when [uploadNativeSymbols] is enabled.
        // Default is disabled.
        includeNativeSources = true

        // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
        // This enables source context, allowing you to see your source
        // code as part of your stack traces in Sentry.
        //
        // Default is disabled.
        includeSourceContext = shouldSentryAutoUpload()

        // Enable or disable the tracing instrumentation.
        // Does auto instrumentation for specified features through bytecode manipulation.
        // Default is enabled.
        tracingInstrumentation {
            enabled = false
        }

        // `@sentry/react-native` ships with compatible `sentry-android`
        // This option would install the latest version that ships with the SDK or SAGP (Sentry Android Gradle Plugin)
        // which might be incompatible with the React Native SDK
        // Enable auto-installation of Sentry components (sentry-android SDK and okhttp, timber and fragment integrations).
        // Default is enabled.
        autoInstallation {
        enabled = false
        }

        // Disables or enables dependencies metadata reporting for Sentry.
        // If enabled, the plugin will collect external dependencies and
        // upload them to Sentry as part of events. If disabled, all the logic
        // related to the dependencies metadata report will be excluded.
        //
        // Default is enabled.
        includeDependenciesReport = false

        // Whether the plugin should send telemetry data to Sentry.
        // If disabled the plugin won't send telemetry data.
        // This is auto disabled if running against a self hosted instance of Sentry.
        // Default is enabled.
        telemetry = false
    }
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.cyanchill.missingcore.music'
    defaultConfig {
        applicationId 'com.cyanchill.missingcore.music'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 17
        versionName "1.0.0-rc.12"
    }
    /**
     * https://developer.android.com/build/configure-apk-splits
     *
     *  - https://github.com/react-native-community/discussions-and-proposals/issues/602
     *  - https://reactnative.dev/docs/signed-apk-android#publishing-to-other-stores
     */
    splits {
        abi {
            reset()
            enable true
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            universalApk true  // If true, also generate a universal APK
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        /**
         * Use app signing by Google Play. Fallback to debug config if not provided.
         *  - https://reactnative.dev/docs/signed-apk-android#adding-signing-config-to-your-apps-gradle-config
         */
        release {
            if (project.hasProperty('RELEASE_KEYSTORE_PASSWORD')) {
                storeFile file("keystore.jks")
                storePassword RELEASE_KEYSTORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            } else {
              storeFile file('debug.keystore')
              storePassword 'android'
              keyAlias 'androiddebugkey'
              keyPassword 'android'
            }
        }
    }
    /**
     * For each separate APK per architecture, we should set a different version
     * code as when uploaded to the Play Store, they should have a unique code
     * as described here:
     *  - https://developer.android.com/build/configure-apk-splits#configure-APK-versions
     *
     * However, since these are to be distributed via GitHub, it should be fine.
     */
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".dev"
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
applyNativeModulesAppBuildGradle(project)

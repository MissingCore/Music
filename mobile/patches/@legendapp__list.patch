diff --git a/animated.d.mts b/animated.d.mts
index ca6e0abb7577ef0c0d76fe5db344c3b56e2c5d9c..a784527350fe745041f7dc952f1579756a79aea0 100644
--- a/animated.d.mts
+++ b/animated.d.mts
@@ -6,7 +6,7 @@ import { Animated } from 'react-native';
 declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<react_native.ScrollViewProps, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -53,6 +53,7 @@ declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<re
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<_legendapp_list.LegendListRef>) => React.ReactNode)>;
 
 export { AnimatedLegendList };
diff --git a/animated.d.ts b/animated.d.ts
index ca6e0abb7577ef0c0d76fe5db344c3b56e2c5d9c..a784527350fe745041f7dc952f1579756a79aea0 100644
--- a/animated.d.ts
+++ b/animated.d.ts
@@ -6,7 +6,7 @@ import { Animated } from 'react-native';
 declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<react_native.ScrollViewProps, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -53,6 +53,7 @@ declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<re
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<_legendapp_list.LegendListRef>) => React.ReactNode)>;
 
 export { AnimatedLegendList };
diff --git a/index.d.mts b/index.d.mts
index 1a684d6951ee11acaaf1384f77bd77d0c6d5e149..b275f8f6442c8a2696d61d714fe643658e8a368d 100644
--- a/index.d.mts
+++ b/index.d.mts
@@ -32,9 +32,8 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
     columnWrapperStyle?: ColumnWrapperStyle;
     /**
      * Array of items to render in the list.
-     * @required
      */
-    data: ReadonlyArray<ItemT>;
+    data?: ReadonlyArray<ItemT>;
     /**
      * Distance in pixels to pre-render items ahead of the visible area.
      * @default 250
@@ -204,6 +203,11 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
      * @default false
      */
     waitForInitialLayout?: boolean;
+    /**
+     * If true, prevent the list from scrolling to the top when the data changes.
+     * @default false
+     */
+    disableScrollTopOnDataChange?: boolean;
 };
 interface ColumnWrapperStyle {
     rowGap?: number;
@@ -232,7 +236,7 @@ interface InternalState {
     isEndReached: boolean;
     isAtBottom: boolean;
     isAtTop: boolean;
-    data: readonly any[];
+    data?: readonly any[];
     hasScrolled?: boolean;
     scrollLength: number;
     startBuffered: number;
@@ -456,7 +460,7 @@ declare const typedMemo: TypedMemo;
 declare const LegendList: <T>(props: Omit<react_native.ScrollViewProps, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -503,6 +507,7 @@ declare const LegendList: <T>(props: Omit<react_native.ScrollViewProps, "content
     viewabilityConfig?: ViewabilityConfig;
     viewabilityConfigCallbackPairs?: ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<LegendListRef>) => React$1.ReactNode;
 
 declare function useViewability(callback: ViewabilityCallback, configId?: string): void;
diff --git a/index.d.ts b/index.d.ts
index 1a684d6951ee11acaaf1384f77bd77d0c6d5e149..b275f8f6442c8a2696d61d714fe643658e8a368d 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -32,9 +32,8 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
     columnWrapperStyle?: ColumnWrapperStyle;
     /**
      * Array of items to render in the list.
-     * @required
      */
-    data: ReadonlyArray<ItemT>;
+    data?: ReadonlyArray<ItemT>;
     /**
      * Distance in pixels to pre-render items ahead of the visible area.
      * @default 250
@@ -204,6 +203,11 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
      * @default false
      */
     waitForInitialLayout?: boolean;
+    /**
+     * If true, prevent the list from scrolling to the top when the data changes.
+     * @default false
+     */
+    disableScrollTopOnDataChange?: boolean;
 };
 interface ColumnWrapperStyle {
     rowGap?: number;
@@ -232,7 +236,7 @@ interface InternalState {
     isEndReached: boolean;
     isAtBottom: boolean;
     isAtTop: boolean;
-    data: readonly any[];
+    data?: readonly any[];
     hasScrolled?: boolean;
     scrollLength: number;
     startBuffered: number;
@@ -456,7 +460,7 @@ declare const typedMemo: TypedMemo;
 declare const LegendList: <T>(props: Omit<react_native.ScrollViewProps, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -503,6 +507,7 @@ declare const LegendList: <T>(props: Omit<react_native.ScrollViewProps, "content
     viewabilityConfig?: ViewabilityConfig;
     viewabilityConfigCallbackPairs?: ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<LegendListRef>) => React$1.ReactNode;
 
 declare function useViewability(callback: ViewabilityCallback, configId?: string): void;
diff --git a/index.js b/index.js
index cd5c8fe34c9ef95cbd7a63f70c844dbc09101cd6..ca7c065a9601b6f182260238938bd648b314ccb8 100644
--- a/index.js
+++ b/index.js
@@ -914,6 +914,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
     viewabilityConfig,
     viewabilityConfigCallbackPairs,
     onViewableItemsChanged,
+    disableScrollTopOnDataChange = false,
     ...rest
   } = props;
   const callbacks = React6.useRef({
@@ -1731,7 +1732,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
             };
             refState.current.anchorElement = newAnchorElement;
             (_b = refState.current.belowAnchorElementPositions) == null ? void 0 : _b.clear();
-            scrollTo(0, false);
+            if (!disableScrollTopOnDataChange) scrollTo(0, false);
             setTimeout(() => {
               calculateItemsInView();
             }, 0);
@@ -1746,7 +1747,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
           } else {
             refState.current.startBufferedId = void 0;
           }
-          scrollTo(0, false);
+          if (!disableScrollTopOnDataChange) scrollTo(0, false);
           setTimeout(() => {
             calculateItemsInView();
           }, 0);
diff --git a/index.mjs b/index.mjs
index 7b666b843d074d92a968c14c51fe4238647777eb..10f1d55bcc9b2631739d4e38fa8c2a181ffab7b8 100644
--- a/index.mjs
+++ b/index.mjs
@@ -893,6 +893,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
     viewabilityConfig,
     viewabilityConfigCallbackPairs,
     onViewableItemsChanged,
+    disableScrollTopOnDataChange = false,
     ...rest
   } = props;
   const callbacks = useRef({
@@ -1710,7 +1711,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
             };
             refState.current.anchorElement = newAnchorElement;
             (_b = refState.current.belowAnchorElementPositions) == null ? void 0 : _b.clear();
-            scrollTo(0, false);
+            if (!disableScrollTopOnDataChange) scrollTo(0, false);
             setTimeout(() => {
               calculateItemsInView();
             }, 0);
@@ -1725,7 +1726,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
           } else {
             refState.current.startBufferedId = void 0;
           }
-          scrollTo(0, false);
+          if (!disableScrollTopOnDataChange) scrollTo(0, false);
           setTimeout(() => {
             calculateItemsInView();
           }, 0);
diff --git a/keyboard-controller.d.mts b/keyboard-controller.d.mts
index a9425a016c3a2e10b7b53c0e894f8bb475d14442..02b680b4f1cdb209aaf4140bce8fcced23f5b3da 100644
--- a/keyboard-controller.d.mts
+++ b/keyboard-controller.d.mts
@@ -193,7 +193,7 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
 }) => React.ReactElement | null) | (<T>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -240,10 +240,11 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode) | react_native.Animated.AnimatedComponent<(<T>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -290,10 +291,11 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode)> = <T>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -340,10 +342,11 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly ItemT[];
+    data?: readonly ItemT[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -390,6 +393,7 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & {
     LegendList?: ListT;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode;
diff --git a/keyboard-controller.d.ts b/keyboard-controller.d.ts
index a9425a016c3a2e10b7b53c0e894f8bb475d14442..02b680b4f1cdb209aaf4140bce8fcced23f5b3da 100644
--- a/keyboard-controller.d.ts
+++ b/keyboard-controller.d.ts
@@ -193,7 +193,7 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
 }) => React.ReactElement | null) | (<T>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -240,10 +240,11 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode) | react_native.Animated.AnimatedComponent<(<T>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -290,10 +291,11 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode)> = <T>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -340,10 +342,11 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode>(props: Omit<react_native.ScrollViewProps, "stickyHeaderIndices" | "contentInset" | "contentOffset" | "maintainVisibleContentPosition"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly ItemT[];
+    data?: readonly ItemT[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -390,6 +393,7 @@ declare const LegendList: <ItemT, ListT extends (<ItemT_1>(props: Omit<_legendap
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & {
     LegendList?: ListT;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode;

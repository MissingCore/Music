diff --git a/animated.d.mts b/animated.d.mts
index 65d381aa93fe775f85dc2fe303afc8141b23828f..86a668881b7d3f24163dfa32a229c3fe65001761 100644
--- a/animated.d.mts
+++ b/animated.d.mts
@@ -6,7 +6,7 @@ import { Animated } from 'react-native';
 declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -54,6 +54,8 @@ declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Om
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React$1.RefAttributes<_legendapp_list.LegendListRef>) => React.ReactNode)>;
 
 export { AnimatedLegendList };
diff --git a/animated.d.ts b/animated.d.ts
index 65d381aa93fe775f85dc2fe303afc8141b23828f..86a668881b7d3f24163dfa32a229c3fe65001761 100644
--- a/animated.d.ts
+++ b/animated.d.ts
@@ -6,7 +6,7 @@ import { Animated } from 'react-native';
 declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -54,6 +54,8 @@ declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Om
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React$1.RefAttributes<_legendapp_list.LegendListRef>) => React.ReactNode)>;
 
 export { AnimatedLegendList };
diff --git a/index.d.mts b/index.d.mts
index 5c4b60348d17d4c5f9c810363d3e7cc014e81b2b..3e32402c2de4187cc03d202de105490f66cd7590 100644
--- a/index.d.mts
+++ b/index.d.mts
@@ -32,9 +32,8 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
     columnWrapperStyle?: ColumnWrapperStyle;
     /**
      * Array of items to render in the list.
-     * @required
      */
-    data: ReadonlyArray<ItemT>;
+    data?: ReadonlyArray<ItemT>;
     /**
      * Distance in pixels to pre-render items ahead of the visible area.
      * @default 250
@@ -208,6 +207,17 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
      * @default false
      */
     waitForInitialLayout?: boolean;
+    /**
+     * If true, prevent the list from scrolling to the top when the data changes.
+     * @default false
+     */
+    disableScrollTopOnDataChange?: boolean;
+    /**
+     * If true, use `undefined` instead of `null` to reset `containerItemKey${i}`
+     * and `containerItemKey${i}` in `checkResetContainers` (pre-`beta.53` behavior).
+     * @default false
+     */
+    resetWithUndefined?: boolean;
 };
 interface ColumnWrapperStyle {
     rowGap?: number;
@@ -236,7 +246,7 @@ interface InternalState {
     isEndReached: boolean;
     isAtBottom: boolean;
     isAtTop: boolean;
-    data: readonly any[];
+    data?: readonly any[];
     hasScrolled?: boolean;
     scrollLength: number;
     startBuffered: number;
@@ -465,7 +475,7 @@ declare const typedMemo: TypedMemo;
 declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -513,6 +523,8 @@ declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "sc
     viewabilityConfig?: ViewabilityConfig;
     viewabilityConfigCallbackPairs?: ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React$1.RefAttributes<LegendListRef>) => React$1.ReactNode;
 
 declare function useViewability(callback: ViewabilityCallback, configId?: string): void;
diff --git a/index.d.ts b/index.d.ts
index 5c4b60348d17d4c5f9c810363d3e7cc014e81b2b..3e32402c2de4187cc03d202de105490f66cd7590 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -32,9 +32,8 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
     columnWrapperStyle?: ColumnWrapperStyle;
     /**
      * Array of items to render in the list.
-     * @required
      */
-    data: ReadonlyArray<ItemT>;
+    data?: ReadonlyArray<ItemT>;
     /**
      * Distance in pixels to pre-render items ahead of the visible area.
      * @default 250
@@ -208,6 +207,17 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
      * @default false
      */
     waitForInitialLayout?: boolean;
+    /**
+     * If true, prevent the list from scrolling to the top when the data changes.
+     * @default false
+     */
+    disableScrollTopOnDataChange?: boolean;
+    /**
+     * If true, use `undefined` instead of `null` to reset `containerItemKey${i}`
+     * and `containerItemKey${i}` in `checkResetContainers` (pre-`beta.53` behavior).
+     * @default false
+     */
+    resetWithUndefined?: boolean;
 };
 interface ColumnWrapperStyle {
     rowGap?: number;
@@ -236,7 +246,7 @@ interface InternalState {
     isEndReached: boolean;
     isAtBottom: boolean;
     isAtTop: boolean;
-    data: readonly any[];
+    data?: readonly any[];
     hasScrolled?: boolean;
     scrollLength: number;
     startBuffered: number;
@@ -465,7 +475,7 @@ declare const typedMemo: TypedMemo;
 declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -513,6 +523,8 @@ declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "sc
     viewabilityConfig?: ViewabilityConfig;
     viewabilityConfigCallbackPairs?: ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React$1.RefAttributes<LegendListRef>) => React$1.ReactNode;
 
 declare function useViewability(callback: ViewabilityCallback, configId?: string): void;
diff --git a/index.js b/index.js
index af49f4c418c95899d836d7b0a4d03f287e56f3b0..f6f16f2043c070cb754e698a93550f7ee07c6cfb 100644
--- a/index.js
+++ b/index.js
@@ -924,6 +924,8 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
     viewabilityConfig,
     viewabilityConfigCallbackPairs,
     onViewableItemsChanged,
+    disableScrollTopOnDataChange = false,
+    resetWithUndefined = false,
     ...rest
   } = props;
   const callbacks = React2.useRef({
@@ -1738,8 +1740,8 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
         for (let i = 0; i < numContainers; i++) {
           const itemKey = peek$(ctx, `containerItemKey${i}`);
           if (!keyExtractorProp || itemKey && state.indexByKey.get(itemKey) === void 0) {
-            set$(ctx, `containerItemKey${i}`, null);
-            set$(ctx, `containerItemData${i}`, null);
+            set$(ctx, `containerItemKey${i}`, resetWithUndefined ? void 0 : null);
+            set$(ctx, `containerItemData${i}`, resetWithUndefined ? void 0 : null);
             set$(ctx, `containerPosition${i}`, ANCHORED_POSITION_OUT_OF_VIEW);
             set$(ctx, `containerColumn${i}`, -1);
           }
@@ -1798,7 +1800,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
             };
             state.anchorElement = newAnchorElement;
             (_b = state.belowAnchorElementPositions) == null ? void 0 : _b.clear();
-            scrollTo(0, false);
+            if (!disableScrollTopOnDataChange) scrollTo(0, false);
             setTimeout(() => {
               calculateItemsInView();
             }, 0);
@@ -1813,7 +1815,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
           } else {
             state.startBufferedId = void 0;
           }
-          scrollTo(0, false);
+          if (!disableScrollTopOnDataChange) scrollTo(0, false);
           setTimeout(() => {
             calculateItemsInView();
           }, 0);
diff --git a/index.mjs b/index.mjs
index 33bc6bc5e70a95e2828899531ec67c62e2616624..0980332724f1153a959c992da504c6759c816657 100644
--- a/index.mjs
+++ b/index.mjs
@@ -903,6 +903,8 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
     viewabilityConfig,
     viewabilityConfigCallbackPairs,
     onViewableItemsChanged,
+    disableScrollTopOnDataChange = false,
+    resetWithUndefined = false,
     ...rest
   } = props;
   const callbacks = useRef({
@@ -1717,8 +1719,8 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
         for (let i = 0; i < numContainers; i++) {
           const itemKey = peek$(ctx, `containerItemKey${i}`);
           if (!keyExtractorProp || itemKey && state.indexByKey.get(itemKey) === void 0) {
-            set$(ctx, `containerItemKey${i}`, null);
-            set$(ctx, `containerItemData${i}`, null);
+            set$(ctx, `containerItemKey${i}`, resetWithUndefined ? void 0 : null);
+            set$(ctx, `containerItemData${i}`, resetWithUndefined ? void 0 : null);
             set$(ctx, `containerPosition${i}`, ANCHORED_POSITION_OUT_OF_VIEW);
             set$(ctx, `containerColumn${i}`, -1);
           }
@@ -1777,7 +1779,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
             };
             state.anchorElement = newAnchorElement;
             (_b = state.belowAnchorElementPositions) == null ? void 0 : _b.clear();
-            scrollTo(0, false);
+            if (!disableScrollTopOnDataChange) scrollTo(0, false);
             setTimeout(() => {
               calculateItemsInView();
             }, 0);
@@ -1792,7 +1794,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
           } else {
             state.startBufferedId = void 0;
           }
-          scrollTo(0, false);
+          if (!disableScrollTopOnDataChange) scrollTo(0, false);
           setTimeout(() => {
             calculateItemsInView();
           }, 0);
diff --git a/keyboard-controller.d.mts b/keyboard-controller.d.mts
index 3b1b4d4080eadc723cd3ddbdb52fd631cea2a907..30516012d2f630b0ad3debc85202ec2634681382 100644
--- a/keyboard-controller.d.mts
+++ b/keyboard-controller.d.mts
@@ -10,7 +10,7 @@ import * as React from 'react';
 declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -58,10 +58,12 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode) | react_native.Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -109,6 +111,8 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode)> | (<ItemT_1>(props: Omit<_legendapp_list_reanimated.AnimatedLegendListPropsBase<ItemT_1>, "refLegendList"> & {
     getEstimatedItemSize?: ((index: number, item: ItemT_1) => number) | undefined;
     ItemSeparatorComponent?: React.ComponentType<{
@@ -295,7 +299,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
 }) => React.ReactElement | null) = <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -343,10 +347,12 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly ItemT[];
+    data?: readonly ItemT[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -394,6 +400,8 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & {
     LegendList?: ListT;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode;
diff --git a/keyboard-controller.d.ts b/keyboard-controller.d.ts
index 3b1b4d4080eadc723cd3ddbdb52fd631cea2a907..30516012d2f630b0ad3debc85202ec2634681382 100644
--- a/keyboard-controller.d.ts
+++ b/keyboard-controller.d.ts
@@ -10,7 +10,7 @@ import * as React from 'react';
 declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -58,10 +58,12 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode) | react_native.Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -109,6 +111,8 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode)> | (<ItemT_1>(props: Omit<_legendapp_list_reanimated.AnimatedLegendListPropsBase<ItemT_1>, "refLegendList"> & {
     getEstimatedItemSize?: ((index: number, item: ItemT_1) => number) | undefined;
     ItemSeparatorComponent?: React.ComponentType<{
@@ -295,7 +299,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
 }) => React.ReactElement | null) = <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -343,10 +347,12 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly ItemT[];
+    data?: readonly ItemT[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -394,6 +400,8 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
+    resetWithUndefined?: boolean;
 } & {
     LegendList?: ListT;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode;

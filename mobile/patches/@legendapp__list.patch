diff --git a/animated.d.mts b/animated.d.mts
index 65d381aa93fe775f85dc2fe303afc8141b23828f..d2101b5ef835e37e132abe2152cc4af91bac0d53 100644
--- a/animated.d.mts
+++ b/animated.d.mts
@@ -6,7 +6,7 @@ import { Animated } from 'react-native';
 declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -54,6 +54,7 @@ declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Om
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<_legendapp_list.LegendListRef>) => React.ReactNode)>;
 
 export { AnimatedLegendList };
diff --git a/animated.d.ts b/animated.d.ts
index 65d381aa93fe775f85dc2fe303afc8141b23828f..d2101b5ef835e37e132abe2152cc4af91bac0d53 100644
--- a/animated.d.ts
+++ b/animated.d.ts
@@ -6,7 +6,7 @@ import { Animated } from 'react-native';
 declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -54,6 +54,7 @@ declare const AnimatedLegendList: Animated.AnimatedComponent<(<T>(props: Omit<Om
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<_legendapp_list.LegendListRef>) => React.ReactNode)>;
 
 export { AnimatedLegendList };
diff --git a/index.d.mts b/index.d.mts
index 5c4b60348d17d4c5f9c810363d3e7cc014e81b2b..ee4a46e130dd094fa7e5f280d3c43e4918f005e3 100644
--- a/index.d.mts
+++ b/index.d.mts
@@ -32,9 +32,8 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
     columnWrapperStyle?: ColumnWrapperStyle;
     /**
      * Array of items to render in the list.
-     * @required
      */
-    data: ReadonlyArray<ItemT>;
+    data?: ReadonlyArray<ItemT>;
     /**
      * Distance in pixels to pre-render items ahead of the visible area.
      * @default 250
@@ -208,6 +207,11 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
      * @default false
      */
     waitForInitialLayout?: boolean;
+    /**
+     * If true, prevent the list from scrolling to the top when the data changes.
+     * @default false
+     */
+    disableScrollTopOnDataChange?: boolean;
 };
 interface ColumnWrapperStyle {
     rowGap?: number;
@@ -236,7 +240,7 @@ interface InternalState {
     isEndReached: boolean;
     isAtBottom: boolean;
     isAtTop: boolean;
-    data: readonly any[];
+    data?: readonly any[];
     hasScrolled?: boolean;
     scrollLength: number;
     startBuffered: number;
@@ -465,7 +469,7 @@ declare const typedMemo: TypedMemo;
 declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -513,6 +517,7 @@ declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "sc
     viewabilityConfig?: ViewabilityConfig;
     viewabilityConfigCallbackPairs?: ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<LegendListRef>) => React$1.ReactNode;
 
 declare function useViewability(callback: ViewabilityCallback, configId?: string): void;
diff --git a/index.d.ts b/index.d.ts
index 5c4b60348d17d4c5f9c810363d3e7cc014e81b2b..ee4a46e130dd094fa7e5f280d3c43e4918f005e3 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -32,9 +32,8 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
     columnWrapperStyle?: ColumnWrapperStyle;
     /**
      * Array of items to render in the list.
-     * @required
      */
-    data: ReadonlyArray<ItemT>;
+    data?: ReadonlyArray<ItemT>;
     /**
      * Distance in pixels to pre-render items ahead of the visible area.
      * @default 250
@@ -208,6 +207,11 @@ type LegendListPropsBase<ItemT, TScrollView extends ComponentProps<typeof Scroll
      * @default false
      */
     waitForInitialLayout?: boolean;
+    /**
+     * If true, prevent the list from scrolling to the top when the data changes.
+     * @default false
+     */
+    disableScrollTopOnDataChange?: boolean;
 };
 interface ColumnWrapperStyle {
     rowGap?: number;
@@ -236,7 +240,7 @@ interface InternalState {
     isEndReached: boolean;
     isAtBottom: boolean;
     isAtTop: boolean;
-    data: readonly any[];
+    data?: readonly any[];
     hasScrolled?: boolean;
     scrollLength: number;
     startBuffered: number;
@@ -465,7 +469,7 @@ declare const typedMemo: TypedMemo;
 declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -513,6 +517,7 @@ declare const LegendList: <T>(props: Omit<Omit<react_native.ScrollViewProps, "sc
     viewabilityConfig?: ViewabilityConfig;
     viewabilityConfigCallbackPairs?: ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React$1.RefAttributes<LegendListRef>) => React$1.ReactNode;
 
 declare function useViewability(callback: ViewabilityCallback, configId?: string): void;
diff --git a/index.js b/index.js
index 433d44f11524512c53e8a28755220d6e09d4d07e..2a19083b93bc5525c184bd48e09ba540e53ee0cc 100644
--- a/index.js
+++ b/index.js
@@ -924,6 +924,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
     viewabilityConfig,
     viewabilityConfigCallbackPairs,
     onViewableItemsChanged,
+    disableScrollTopOnDataChange = false,
     ...rest
   } = props;
   const callbacks = React2.useRef({
@@ -959,7 +960,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
   };
   const getItemSize = (key, index, data, useAverageSize = false) => {
     const state = refState.current;
-    const sizeKnown = state.sizesKnown.get(key);
+    const sizeKnown = state.sizes.get(key);
     if (sizeKnown !== void 0) {
       return sizeKnown;
     }
@@ -1795,7 +1796,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
             };
             state.anchorElement = newAnchorElement;
             (_b = state.belowAnchorElementPositions) == null ? void 0 : _b.clear();
-            scrollTo(0, false);
+            if (!disableScrollTopOnDataChange) scrollTo(0, false);
             setTimeout(() => {
               calculateItemsInView();
             }, 0);
@@ -1810,7 +1811,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
           } else {
             state.startBufferedId = void 0;
           }
-          scrollTo(0, false);
+          if (!disableScrollTopOnDataChange) scrollTo(0, false);
           setTimeout(() => {
             calculateItemsInView();
           }, 0);
diff --git a/index.mjs b/index.mjs
index 2d60b7aa51e1db7ae47af1adc4f3915724fc7848..fb1391938d4d0961075308a57d9837267042dc85 100644
--- a/index.mjs
+++ b/index.mjs
@@ -903,6 +903,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
     viewabilityConfig,
     viewabilityConfigCallbackPairs,
     onViewableItemsChanged,
+    disableScrollTopOnDataChange = false,
     ...rest
   } = props;
   const callbacks = useRef({
@@ -938,7 +939,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
   };
   const getItemSize = (key, index, data, useAverageSize = false) => {
     const state = refState.current;
-    const sizeKnown = state.sizesKnown.get(key);
+    const sizeKnown = state.sizes.get(key);
     if (sizeKnown !== void 0) {
       return sizeKnown;
     }
@@ -1774,7 +1775,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
             };
             state.anchorElement = newAnchorElement;
             (_b = state.belowAnchorElementPositions) == null ? void 0 : _b.clear();
-            scrollTo(0, false);
+            if (!disableScrollTopOnDataChange) scrollTo(0, false);
             setTimeout(() => {
               calculateItemsInView();
             }, 0);
@@ -1789,7 +1790,7 @@ var LegendListInner = typedForwardRef(function LegendListInner2(props, forwarded
           } else {
             state.startBufferedId = void 0;
           }
-          scrollTo(0, false);
+          if (!disableScrollTopOnDataChange) scrollTo(0, false);
           setTimeout(() => {
             calculateItemsInView();
           }, 0);
diff --git a/keyboard-controller.d.mts b/keyboard-controller.d.mts
index 3b1b4d4080eadc723cd3ddbdb52fd631cea2a907..cceffc5445094a7bb2c49839258844e8b24d01f5 100644
--- a/keyboard-controller.d.mts
+++ b/keyboard-controller.d.mts
@@ -10,7 +10,7 @@ import * as React from 'react';
 declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -58,10 +58,11 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode) | react_native.Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -109,6 +110,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode)> | (<ItemT_1>(props: Omit<_legendapp_list_reanimated.AnimatedLegendListPropsBase<ItemT_1>, "refLegendList"> & {
     getEstimatedItemSize?: ((index: number, item: ItemT_1) => number) | undefined;
     ItemSeparatorComponent?: React.ComponentType<{
@@ -295,7 +297,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
 }) => React.ReactElement | null) = <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -343,10 +345,11 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly ItemT[];
+    data?: readonly ItemT[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -394,6 +397,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & {
     LegendList?: ListT;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode;
diff --git a/keyboard-controller.d.ts b/keyboard-controller.d.ts
index 3b1b4d4080eadc723cd3ddbdb52fd631cea2a907..cceffc5445094a7bb2c49839258844e8b24d01f5 100644
--- a/keyboard-controller.d.ts
+++ b/keyboard-controller.d.ts
@@ -10,7 +10,7 @@ import * as React from 'react';
 declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -58,10 +58,11 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode) | react_native.Animated.AnimatedComponent<(<T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -109,6 +110,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode)> | (<ItemT_1>(props: Omit<_legendapp_list_reanimated.AnimatedLegendListPropsBase<ItemT_1>, "refLegendList"> & {
     getEstimatedItemSize?: ((index: number, item: ItemT_1) => number) | undefined;
     ItemSeparatorComponent?: React.ComponentType<{
@@ -295,7 +297,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
 }) => React.ReactElement | null) = <T>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly T[];
+    data?: readonly T[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -343,10 +345,11 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode>(props: Omit<Omit<react_native.ScrollViewProps, "scrollEventThrottle">, "contentOffset" | "contentInset" | "maintainVisibleContentPosition" | "stickyHeaderIndices"> & {
     alignItemsAtEnd?: boolean;
     columnWrapperStyle?: _legendapp_list.ColumnWrapperStyle;
-    data: readonly ItemT[];
+    data?: readonly ItemT[];
     drawDistance?: number;
     estimatedItemSize?: number;
     extraData?: any;
@@ -394,6 +397,7 @@ declare const LegendList: <ItemT, ListT extends (<T>(props: Omit<Omit<react_nati
     viewabilityConfig?: _legendapp_list.ViewabilityConfig;
     viewabilityConfigCallbackPairs?: _legendapp_list.ViewabilityConfigCallbackPairs | undefined;
     waitForInitialLayout?: boolean;
+    disableScrollTopOnDataChange?: boolean;
 } & {
     LegendList?: ListT;
 } & React.RefAttributes<LegendListRef>) => React.ReactNode;
